class "Узел xml документа";
-- https://docs.microsoft.com/en-us/previous-versions/windows/desktop/ms764730(v=vs.85)

import Classes XML.Consts;
import СИС2 Classes СтроковыеФункции;

type XMLNode = XML.Node;

inclass public

 func Create: XMLNode;
   Result = inherited Create;
 end;

 func CreateEx(aNode:AutoObject): XMLNode;
      Result = Create;
      Result.XMLDOMElement = aNode;
 end;

inobject private
 --var XMLDOMDocument      : AutoObject;
 var XMLDOMElement       : AutoObject;
 var ParentNode          : XMLNode;
 var ChildNodes          : XMLNode[];
 var Attributes          : XMLNode[];
 var rowRoot             : Logical; -- узл строки
 var nodePath            : String;
proc Init;


end;

inobject public

proc Load(aData:String;LoadAsFile:Logical);
  var loadSuccess: Logical;
  var ErrorMessage : String;
  var I : Integer;

  XMLDOMElement = AutoObject.Create("MSXML2.DOMDocument");
  if LoadAsFile then
     loadSuccess = XMLDOMElement.load(aData);
  else
     loadSuccess = XMLDOMElement.loadXML(aData);
  end;


  if not loadSuccess or XMLDOMElement.parseError.errorCode <>0 then
     ErrorMessage = ErrorMessage+Format("Ошибка чтения XML-файла:^MКод=%d^MСтрока : %d^Mпозиция : %d^M%s",
           [XMLDOMElement.parseError.errorCode,
            XMLDOMElement.parseError.line,
            XMLDOMElement.parseError.linepos,
            XMLDOMElement.parseError.reason
            ]);
     SetError(1,ErrorMessage);
  end;
  XMLDOMElement.setProperty("SelectionLanguage", "XPath");
end;

func GetParentNode: XMLNode;
   if ParentNode<>nil then
      return ParentNode;
   end;
   if XMLDOMElement<>nil and XMLDOMElement.parentNode<>nil then
      ParentNode = XMLNode.CreateEx(XMLDOMElement.parentNode);
   end;
   Result = ParentNode;
end;

proc SetParentNode(a:XMLNode);
   ParentNode = a;
end;

func getRootNode: XMLNode;
  if isDocument then
     Result = XMLNode.CreateEx(XMLDOMElement.documentElement);
  end;
end;

proc SetNamespace(aValue:String);
   SetProperty("SelectionNamespaces",aValue);
end;

proc SetProperty(aProperty:String; aValue:String);
  if XMLDOMElement<>nil then
     XMLDOMElement.setProperty(aProperty,aValue);
  end;
end;

func GetProperty(aProperty:String):String;
  if XMLDOMElement<>nil then
     Result = XMLDOMElement.getProperty(aProperty);
  end;
end;

func isRootNode:Logical;
  Result = GetType = NODE_ELEMENT and GetParentNode.isDocument;
end;

func isRow:Logical;
  Result = rowRoot;
end;

proc SetIsRow;
  rowRoot = True; -- узел является строкой
end;

func GetChildNodes: XMLNode[];
  var I: Integer;
  var child: XMLNode;
  if XMLDOMElement<>nil then
     if ChildNodes<>nil then
        return ChildNodes;
     end;
     if XMLDOMElement.childNodes.Length>0 then
        for  I = 0.. XMLDOMElement.childNodes.Length-1 do
           if not XMLDOMElement.childNodes.item(I).nodeType in [NODE_TEXT, NODE_COMMENT] then
              child = XMLNode.CreateEx(XMLDOMElement.childNodes.item(I));
              child.SetParentNode(self);
              InsertInArray(ChildNodes,LengthOfArray(ChildNodes)+1,child);
           end;
        end;
        Result= ChildNodes;
     end;
  end;
end;

func GetNodesByTagName(aTagName:String): XMLNode[];
  var IXMLDOMNodeList: AutoObject;
  var I : Integer;
  if XMLDOMElement<>nil then
     IXMLDOMNodeList = XMLDOMElement.getElementsByTagName(aTagName);
     if IXMLDOMNodeList<>nil and IXMLDOMNodeList.length>0 then
       for I = 0..IXMLDOMNodeList.length-1 do
          InsertInArray(Result, LengthOfArray(Result)+1, XMLNode.CreateEx(IXMLDOMNodeList.item(I)));
       end;
     end;
  end;
end;


func GetCell :ICell;
   Result = XML.Cell.CreateEx(XMLDOMElement);
end;

func GetCellString: String;
   Result = GetCell.AsString;
end;

func GetType: NodeType;
  if XMLDOMElement = nil then
     return NODE_NIL;
  end;
  Result = XMLDOMElement.nodeType;
end;

func isDocument:Logical;
   Result = XMLDOMElement<>nil and XMLDOMElement.nodeType = NODE_DOCUMENT;
end;
-- Returns the qualified name for attribute,
-- document type, element, entity, or notation nodes.
-- Returns a fixed string for all other node types. Read-only.
func GetName: String;
  if XMLDOMElement<>nil then
     Result = XMLDOMElement.nodeName;
  end;
end;

-- возвращает путь к узлу начиная от дочернего узла строки
func GetPath:String;
  if isRow or isRootNode then
     return "";
  end;
  if nodePath<>nil then
     return nodePath;
  end;
  if ParentNode.isRow then
     nodePath = GetName;
  else
     nodePath = ParentNode.GetPath + "_" + GetName;
  end;
  return nodePath;
end;


--Contains the text associated with the node
func GetValue:String;
  if XMLDOMElement<>nil then
     Result = XMLDOMElement.nodeValue;
  end;
end;

-- текстовое содержимое узла
func GetText:String;
  if XMLDOMElement<>nil then
     Result = XMLDOMElement.text;
  end;
end;

func GetAttributes: XMLNode[];
  var I : Integer;
  if XMLDOMElement<>nil then
     if Attributes<>nil then
        return Attributes;
     end;
     if HasAttributes then
        for I = 0..GetAttributesCount-1 do
           InsertInArray(Attributes, LengthOfArray(Attributes)+1,XMLNode.CreateEx(XMLDOMElement.attributes.item(I)));
        end;
        Result = Attributes;
     end;
  end;
end;



func GetNamespace:String[];
  var I: Integer;
  if isRootNode and HasAttributes then
     GetAttributes;
     for  I = 1.. LengthOfArray(Attributes) do
        Attributes[I].isNamespaceAttribute;
        InsertInArray(Result,LengthOfArray(Result)+1,Attributes[I].GetName+"='"+Attributes[I].GetValue+"'"); --
     end;
  end;

end;

func GetChildCount: Integer;
   if XMLDOMElement<>nil then

   return LengthOfArray(GetChildNodes);
   end;
end;

func GetAttributesCount:Integer;
  if XMLDOMElement<>nil then
     if Attributes<>nil then
        return lengthOfArray(Attributes);
     end;
     Result = XMLDOMElement.attributes.length;
  end;
end;

--@doc возвращает объект XMLNode, если не найден возвращает пустой объект
func GetNodeByName(aTagName:String):XMLNode;
   Result = XMLNode.CreateEx(if(XMLDOMElement<>nil,XMLDOMElement.selectSingleNode(aTagName),nil));
end;

func HasChildren:Logical;
  Result = GetChildCount>0;
end;

inobject private

func HasAttributes:Logical;
  Result = GetAttributesCount>0 ;
end;

func isNamespaceAttribute:Logical;
  Result = getType = NODE_ATTRIBUTE and СодержимоеСтрокОдинаково(Слева(GetName,5), "xmlns");
end;

proc removeAllComments;
   var IXMLDOMNodeList: AutoObject;
   var I:Integer;
   if XMLDOMElement<>nil then
      IXMLDOMNodeList = XMLDOMElement.SelectNodes("//comment()");
      if IXMLDOMNodeList.Length>0 then
         for I = 0..IXMLDOMNodeList.Length do
            IXMLDOMNodeList.item(I).parentNode.RemoveChild(IXMLDOMNodeList.item(I));

         end;

      end;
   end;
end;

end